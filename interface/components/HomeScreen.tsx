/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/4FLyz0tvpjy
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Rubik } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Sheet, SheetTrigger, SheetContent } from "@/components/ui/sheet"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip"
import { HomeIcon, NewspaperIcon, ClubIcon, BriefcaseIcon, CpuIcon, MenuIcon, WandSparklesIcon } from "lucide-react"
import {Navigation} from "@/components/Navigation"
import { useEffect, useState } from "react"
import { getAllReports, getGroupedReports } from "@/lib/reports"

export function HomeScreen() {
  const [featuredFactoid, setFeaturedFactoid] = useState(null)
  const [factoids, setFactoids] = useState(null) 
  const [isLoading, setIsLoading] = useState(true);
  const [selectedFactoid, setSelectedFactoid] = useState<Report | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchFactoids = async () => {
      try {
          const allFactoids = await getAllReports() as any[];
          const featuredFactoid = allFactoids[Math.floor(Math.random() * allFactoids.length)]          
          setFeaturedFactoid(featuredFactoid);

          const groupedFactoids = await getGroupedReports();
          setFactoids(groupedFactoids);
        }
       catch (error) {
        console.error('Error fetching reports:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchFactoids();
  }, []);

  return (
    <>
        { featuredFactoid && (
        <section className="w-full px-4 py-6 sm:py-9 md:py-12 lg:py-16 xl:py-32">
          <div className="container grid grid-cols-1 gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]">
            <img
              src={featuredFactoid.cover_image ? `${process.env.NEXT_PUBLIC_IMAGE_SERVER_URL}/${featuredFactoid.cover_image}` : "/placeholder.svg"}
              alt="Featured News"
              className="mx-auto aspect-[2/1] overflow-hidden rounded-xl object-cover sm:w-full lg:order-last"
            />
            <div className="flex flex-col justify-center space-y-4">
              <div className="space-y-2">
                <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none line-clamp-4">
                  {featuredFactoid.parsed.publication_info?.catchy_title || featuredFactoid.claim}
                </h1>
                <p className="line-clamp-6 max-w-[600px] text-muted-foreground md:text-xl">
                  {featuredFactoid.evaluation}
                </p>
              </div>
            </div>
          </div>
        </section>)}


        {factoids && Object.entries(factoids).map(([category, items]) => (
          <section key={category} className="w-full px-4 py-6 sm:py-9 md:py-12 lg:py-16 bg-muted">
            <div className="container">
              <div className="mb-6">
                <h2 className="text-2xl font-bold">{category}</h2>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
                {items.map((factoid) => (
                  <div key={factoid.id} className="rounded-lg overflow-hidden">
                    <img
                      src={factoid.cover_image ? `${process.env.NEXT_PUBLIC_IMAGE_SERVER_URL}/${factoid.cover_image}` : "/placeholder.svg"}
                      alt={factoid.claim}
                      className="aspect-[3/2] object-cover"
                    />
                    <div className="p-4 bg-background">
                      <h3 className="line-clamp-2 xl:line-clamp-1 text-lg font-semibold">
                        {factoid.parsed.publication_info?.catchy_title || factoid.claim}
                      </h3>
                      <p className="text-muted-foreground line-clamp-3">{factoid.evaluation}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </section>
        ))}
        <div className="fixed bottom-4 right-4 z-50">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button onClick={(e)=> location.href="/fact-check"} size="icon" className="rounded-full bg-primary text-primary-foreground">
                  <WandSparklesIcon className="h-6 w-6" />
                  <span className="sr-only">Ask a question or debunk a myth</span>
                </Button>
              </TooltipTrigger>
              <TooltipContent>Ask a question or debunk a myth</TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </>
  )
}

